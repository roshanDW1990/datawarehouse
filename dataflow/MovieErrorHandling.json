{
	"name": "MovieErrorHandling",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "MoviesCSV",
						"type": "DatasetReference"
					},
					"name": "MovieSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "OutputCSV",
						"type": "DatasetReference"
					},
					"name": "SqlServerOutput"
				},
				{
					"dataset": {
						"referenceName": "OutputCSV",
						"type": "DatasetReference"
					},
					"name": "ErrorOutputFile"
				}
			],
			"transformations": [
				{
					"name": "ConditionalSplit1"
				}
			],
			"script": "source(output(\n\t\tmovieId as string,\n\t\ttitle as string,\n\t\tgenres as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> MovieSource\nMovieSource split(isNull(toInteger(movieId)) || length(title) > 15,\n\tdisjoint: false) ~> ConditionalSplit1@(BadRows, GoodRows)\nConditionalSplit1@BadRows sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['MoviesBadRecordsOutput'],\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> SqlServerOutput\nConditionalSplit1@GoodRows sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['MoviesGoodRowsOutput'],\n\tumask: 0022,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> ErrorOutputFile"
		}
	}
}